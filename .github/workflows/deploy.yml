# 构建并部署到 GitHub Pages
name: Build and Deploy

on:
  # 在推送到master分支时触发
  push:
    branches: [ master ]
  # 为 pull request 创建预览
  pull_request:
    branches: [ master ]
  # 允许手动触发
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 允许一个并发的部署
concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  # 仅在 push 到 master 分支时部署到 GitHub Pages
  build-and-deploy:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      # 1. 检出代码
      - name: Checkout
        uses: actions/checkout@v4

      # 2. 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # 3. 安装依赖 (使用缓存优化)
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      # 4. 运行测试 (如果存在)
      - name: Run tests
        run: npm run test:run

      # 5. 构建项目
      - name: Build project
        run: npm run build

      # 6. 设置 GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # 7. 上传构建产物
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      # 8. 部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # 为 pull request 创建预览，但不部署到 GitHub Pages
  pr-preview:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      # 1. 检出代码
      - name: Checkout
        uses: actions/checkout@v4

      # 2. 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # 3. 安装依赖 (使用缓存优化)
      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      # 4. 运行测试 (如果存在)
      - name: Run tests
        run: npm run test:run

      # 5. 构建项目
      - name: Build project
        run: npm run build

      # 6. 输出构建产物信息供审查
      - name: Print build output info
        run: |
          echo "Build completed for PR #${{ github.event.number }}"
          echo "Files in dist/:"
          ls -la dist/